{
    "name": "Performance Monitor",
    "nodes": [{
            "parameters": {},
            "name": "When called by another workflow",
            "type": "n8n-nodes-base.executeWorkflowTrigger",
            "typeVersion": 1,
            "position": [
                300,
                300
            ]
        },
        {
            "parameters": {
                "jsCode": "// Get performance data from input\nconst executionData = $input.all()[0].json;\n\n// Calculate duration if start time is available\nlet durationMs = 0;\nlet durationFormatted = 'unknown';\n\nif (executionData.startTime) {\n  const startTime = new Date(executionData.startTime);\n  const now = new Date();\n  durationMs = now - startTime;\n  \n  // Format duration in a readable format\n  const minutes = Math.floor(durationMs / 60000);\n  const seconds = ((durationMs % 60000) / 1000).toFixed(2);\n  durationFormatted = `${minutes}m ${seconds}s`;\n}\n\n// Get job count from input data if available\nconst jobCount = executionData.jobCount || 0;\n\n// Create performance metrics\nconst performanceMetrics = {\n  executionId: executionData.executionId || 'unknown',\n  timestamp: new Date().toISOString(),\n  schedule: executionData.schedule || 'unknown',\n  durationMs,\n  durationFormatted,\n  jobCount,\n  startTime: executionData.startTime,\n  endTime: new Date().toISOString(),\n  source: executionData.source || 'unknown',\n  success: true,\n  error: false\n};\n\nreturn {\n  json: performanceMetrics\n};"
            },
            "name": "Calculate Metrics",
            "type": "n8n-nodes-base.code",
            "typeVersion": 1,
            "position": [
                500,
                300
            ]
        },
        {
            "parameters": {
                "table": "performance_metrics",
                "columns": {
                    "execution_id": "={{ $json.executionId }}",
                    "timestamp": "={{ $json.timestamp }}",
                    "schedule": "={{ $json.schedule }}",
                    "duration_ms": "={{ $json.durationMs }}",
                    "job_count": "={{ $json.jobCount }}",
                    "start_time": "={{ $json.startTime }}",
                    "end_time": "={{ $json.endTime }}",
                    "source": "={{ $json.source }}",
                    "success": "={{ $json.success }}"
                }
            },
            "name": "Log to Supabase",
            "type": "n8n-nodes-base.supabase",
            "typeVersion": 1,
            "position": [
                700,
                300
            ],
            "credentials": {
                "supabaseApi": {
                    "id": "supabase-credential-id",
                    "name": "Supabase API"
                }
            }
        },
        {
            "parameters": {
                "conditions": {
                    "number": [{
                        "value1": "={{ $json.durationMs }}",
                        "operation": "larger",
                        "value2": 60000
                    }]
                }
            },
            "name": "Performance Alert Check",
            "type": "n8n-nodes-base.if",
            "typeVersion": 1,
            "position": [
                900,
                300
            ]
        },
        {
            "parameters": {
                "operation": "sendEmail",
                "fromEmail": "={{ $json.fromEmail }}",
                "toEmail": "={{ $json.toEmail }}",
                "subject": "⚠️ Performance Alert - Job Automation",
                "text": "=Performance alert for job automation workflow:\n\nExecution ID: {{ $json.executionId }}\nSchedule: {{ $json.schedule }}\nDuration: {{ $json.durationFormatted }} (over 1 minute)\nJob Count: {{ $json.jobCount }}\n\nThis execution took longer than expected. Please investigate possible performance issues.",
                "options": {}
            },
            "name": "Send Performance Alert",
            "type": "n8n-nodes-base.emailSend",
            "typeVersion": 1,
            "position": [
                1100,
                200
            ],
            "credentials": {
                "smtp": {
                    "id": "email-credential-id",
                    "name": "Email Account"
                }
            }
        },
        {
            "parameters": {
                "jsCode": "// Return the performance metrics with additional details\nconst performanceData = $input.all()[0].json;\n\nreturn {\n  json: {\n    ...performanceData,\n    monitored: true,\n    monitoredAt: new Date().toISOString(),\n    alertSent: false,\n    message: `Performance metrics recorded: ${performanceData.durationFormatted}`\n  }\n};"
            },
            "name": "Normal Performance",
            "type": "n8n-nodes-base.code",
            "typeVersion": 1,
            "position": [
                1100,
                400
            ]
        },
        {
            "parameters": {
                "jsCode": "// Return the performance metrics with additional details\nconst performanceData = $input.all()[0].json;\n\nreturn {\n  json: {\n    ...performanceData,\n    monitored: true,\n    monitoredAt: new Date().toISOString(),\n    alertSent: true,\n    message: `Performance alert sent: ${performanceData.durationFormatted} (over threshold)`\n  }\n};"
            },
            "name": "Slow Performance Alert",
            "type": "n8n-nodes-base.code",
            "typeVersion": 1,
            "position": [
                1300,
                200
            ]
        }
    ],
    "connections": {
        "When called by another workflow": {
            "main": [
                [{
                    "node": "Calculate Metrics",
                    "type": "main",
                    "index": 0
                }]
            ]
        },
        "Calculate Metrics": {
            "main": [
                [{
                    "node": "Log to Supabase",
                    "type": "main",
                    "index": 0
                }]
            ]
        },
        "Log to Supabase": {
            "main": [
                [{
                    "node": "Performance Alert Check",
                    "type": "main",
                    "index": 0
                }]
            ]
        },
        "Performance Alert Check": {
            "main": [
                [{
                    "node": "Send Performance Alert",
                    "type": "main",
                    "index": 0
                }],
                [{
                    "node": "Normal Performance",
                    "type": "main",
                    "index": 0
                }]
            ]
        },
        "Send Performance Alert": {
            "main": [
                [{
                    "node": "Slow Performance Alert",
                    "type": "main",
                    "index": 0
                }]
            ]
        }
    },
    "active": true,
    "settings": {
        "saveExecutionProgress": true,
        "saveManualExecutions": true,
        "callerPolicy": "workflowsFromSameOwner"
    },
    "tags": ["job-automation", "performance-monitor"],
    "staticData": null
}